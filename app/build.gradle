//plugins {
//    id 'com.palantir.git-version' version '0.12.2'
//}

apply plugin: 'com.android.application'

int secondsSinceEpoch = System.currentTimeMillis() / 1000

android {
    compileSdkVersion 22
    defaultConfig {
        buildToolsVersion '28.0.3'
        minSdkVersion 22
        targetSdkVersion 22
        versionCode 20210309
        multiDexEnabled true
        applicationId "jp.or.nhk.rd.antwapp4hc"
        versionName 'v2.1.1' + "-" + versionCode + "_" + secondsSinceEpoch
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "antwapp4hc-${versionName}.apk"
        }
    }

    productFlavors {
    }
    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'source_tips'
    }
    dexOptions {
    }
    defaultConfig {
        multiDexEnabled true
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:leanback-v17:21.0.3'
    implementation 'com.google.android.gms:play-services:8.3.0'
    implementation 'commons-codec:commons-codec:1.10'
    implementation 'com.jcraft:jzlib:1.1.3'
    implementation 'io.netty:netty-buffer:4.1.48.Final'
    implementation 'io.netty:netty-codec:4.1.48.Final'
    implementation 'io.netty:netty-codec-http:4.1.48.Final'
    implementation 'io.netty:netty-common:4.1.48.Final'
    implementation 'io.netty:netty-transport:4.1.48.Final'
    implementation 'io.netty:netty-resolver:4.1.48.Final'
    implementation 'io.netty:netty-handler:4.1.48.Final'
    implementation files('libs/JSON-java-20170220.jar')
}

task buildAssets(type: Exec) {
    println '********* Build assets such as HTML with nodejs, Files with python like that ***************'
    //commandLine 'cd', 'src/main/samples/hchtml', '&&', 'node script build'
    //commandLine 'cd', '.'
    commandLine 'pwd'
}

task copyAssets (dependsOn: 'buildAssets', type: Copy){
    println '********* Copy assets such as HTML with nodejs, MetaFiles with python like that ***************'
    delete 'src/main/samples/htmls/hc.html'
    doLast {
        println 'Task:copyDependencies'
        mkdir 'src/main/assets/htmls'
        copy {
            from 'src/main/samples/hchtml/hc.html'
            into 'src/main/assets/htmls'
        }
	}
}

project.afterEvaluate {
    preBuild.dependsOn buildAssets
}

clean.dependsOn copyAssets
clean.mustRunAfter copyAssets
